URL DEL VIDEO: https://www.youtube.com/watch?v=ErtR07GLq54&list=PLvq-jIkSeTUbf3LXzO2QQa3P-oRMcrTAp

ANOTACIONES 

	SELECTOR ROOT:
		El selector :root en CSS se refiere al selector de la raíz del documento HTML, es decir, al elemento <html>. Se utiliza principalmente para definir variables CSS globales, también conocidas como variables personalizadas.
		Cuando defines variables CSS utilizando :root, estas variables se vuelven accesibles desde cualquier parte del documento CSS. Esto las convierte en una forma conveniente de establecer valores que se pueden reutilizar en todo tu sitio web.
		Por ejemplo, puedes definir una variable de color primario en :root y luego utilizarla en múltiples reglas CSS en tu documento. Aquí hay un ejemplo básico de cómo se vería:
		:root {
			--color-primario: #007bff; /* Definición de la variable */
		}
		/* Uso de la variable */
		h1 {
			color: var(--color-primario);
		}
		p {
			border: 1px solid var(--color-primario);
		}
	En este ejemplo, la variable --color-primario se define en :root con el valor #007bff. Luego, esta variable se utiliza en las reglas CSS para establecer el color de texto de los elementos <h1> y el color del borde de los párrafos <p>.
	Utilizar el selector :root para definir variables CSS globales es una práctica común y útil en el desarrollo web moderno, ya que permite una mayor coherencia y flexibilidad en el diseño y la estilización de un sitio web.
	
	BOX-SIZING: BORDER BOX
		La propiedad box-sizing: border-box en CSS es muy útil en el maquetado de páginas web porque cambia la forma en que el navegador calcula el tamaño total de un elemento, incluyendo su contenido, padding y borde. Sin esta propiedad, el modelo de caja predeterminado en CSS (llamado content-box) puede causar ciertos problemas de diseño y maquetado que border-box ayuda a solucionar. 
		Aquí hay algunas razones por las que es comúnmente utilizado:
			- Consistencia en el tamaño de los elementos: Con box-sizing: border-box, el tamaño total de un elemento se define como el tamaño del contenido más el padding más el borde. Esto hace que sea más fácil controlar y predecir el tamaño de los elementos, ya que no tienes que hacer ajustes adicionales para tener en cuenta el padding y el borde.
			- Mejor control sobre el diseño: Al utilizar border-box, puedes especificar dimensiones con mayor precisión, lo que facilita la creación de diseños más coherentes y predecibles. Esto es especialmente útil cuando trabajas con diseños responsivos o grid layouts.
			- Facilita el cálculo de dimensiones: Al diseñar y desarrollar una página web, a menudo necesitas calcular dimensiones precisas para diferentes elementos. border-box simplifica estos cálculos, ya que puedes establecer directamente el ancho y alto del elemento sin tener que preocuparte por sumar el padding y el borde.
			- Mayor eficiencia en el diseño: border-box puede ayudar a reducir la complejidad del código CSS, ya que elimina la necesidad de ajustes adicionales para tener en cuenta el padding y el borde. Esto puede hacer que tu código sea más limpio y fácil de mantener.
		En resumen, box-sizing: border-box es una práctica común en el maquetado de páginas web porque simplifica el diseño, mejora el control sobre el tamaño de los elementos y facilita el trabajo con diseños responsivos y flexibles.
		
	FUNCION VAR
		La función var() en CSS se utiliza para insertar el valor de una variable CSS. Esto permite que los valores de las propiedades CSS se definan una sola vez y se reutilicen en múltiples lugares dentro de tu hoja de estilos.
		La sintaxis básica de la función var() es la siguiente:
			var(--nombre-variable[, valor-por-defecto]);
			--nombre-variable: Es el nombre de la variable CSS que deseas utilizar.
			valor-por-defecto (opcional): Es el valor que se utilizará si la variable no está definida.
	
	USO DE REM EN EL MAQUETADO EN LOS FONT SIZE:
		Sirve para tener de referencia en base al font-size base del documento html, se usa en diseño para tener una relatividad en los tamaños de fuente durante toda la pagina.
		
	USO DE OVERFLOW-X: HIDDEN
		Cuando algun elemento o imagen no esta bien diseñado o no esta contemplado su tamaño, esto puede provocar que el elemento no entre en la pantalla o en el body y provoque un scroll horizontal. Por eso el overflow:hidden hace que ese defecto en el diseño o maquetado no provoque una barra de scroll horizontal no deseada.
		
	VALOR DE AUTO:
		Esta web explica todos los casos de uso de auto dependiendo de la propiedad CSS en la que se use.
		En la propiedad height: auto provoca que el elemento tome la altura del contenido que tiene.
		https://ishadeed.com/article/auto-css/
		
	PROPIEDAD TRANSITION EN ELEMENTOS
		
		La propiedad transition en CSS se utiliza para controlar cómo se animan los cambios en las propiedades CSS de un elemento cuando esos cambios ocurren. Esta propiedad permite especificar la duración, el retraso, la función de temporización y otras características de la transición.
		Cuando se aplica al elemento <a> (hipervínculo), la propiedad transition se puede usar para animar cualquier cambio en las propiedades CSS de ese elemento, como el color del texto, el fondo, el tamaño, el padding, etc. Esto puede ser útil para crear efectos de transición suaves cuando el usuario interactúa con los enlaces, como al pasar el cursor sobre ellos.
		Aquí hay un ejemplo básico de cómo se podría aplicar la propiedad transition a un elemento <a> en CSS:
			a {
				color: black; /* Color de texto predeterminado */
				transition: color 0.3s ease; /* Transición suave del color del texto */
			}
			a:hover {
				color: blue; /* Nuevo color de texto cuando el cursor está sobre el enlace */
			}
			En este ejemplo, cuando el cursor se coloca sobre el enlace (:hover), el color del texto cambia de negro a azul suavemente en 0.3 segundos (especificado por transition: color 0.3s ease;). La propiedad color se está animando aquí, pero podrías aplicar transition a cualquier otra propiedad CSS que desees animar en respuesta a una acción del usuario.
			Es importante tener en cuenta que transition solo anima cambios que ocurren en el estado normal de un elemento (por ejemplo, :hover, :focus, :active, etc.). Si deseas animar cambios de estado específicos, como :visited, deberás aplicar la propiedad transition a esos estados específicos.
	
	PROPIEDAD SCROLL-BEHAVIOR: SMOOTH
	
		Se utiliza para especificar el comportamiento de desplazamiento suave en los elementos contenedores que tienen barras de desplazamiento, como por ejemplo, cualquier contenedor o elemento con overflow.
		Cuando esta propiedad está activada, cualquier desplazamiento que ocurra dentro del elemento se animará suavemente en lugar de hacerlo de manera instantánea y abrupta. Esto significa que el movimiento de desplazamiento se verá más fluido y será más agradable para el usuario.
		Por ejemplo, si tienes un sitio web con enlaces anclados que llevan a diferentes secciones de una página larga, al hacer clic en esos enlaces, el navegador se desplazará suavemente hasta la ubicación de la sección en lugar de saltar instantáneamente a ella.
		Esta propiedad es especialmente útil para mejorar la experiencia del usuario al navegar por páginas largas o cuando se desplazan elementos dentro de un diseño.
	
	PROPIEDAD pointer-events: none;
	
		Esto se utiliza por ejemplo en un menu que esta oculto y tiene hipervinculos dentro, esto provocara que al pasar por algun elemento de hipervinculo oculto, no se active el puntero para poder seleccionar los elementos ocultos.
	
	PROPIEDAD DE TRANSICION SOBRE UN MENU
	
		Se utiliza para especificar cómo se deben animar los cambios en las propiedades CSS cuando ocurren. 
		En este caso particular, transition: opacity .5s ease; se refiere a la transición de opacidad en un menú.
			Desglosemos cada parte de la propiedad:
				-opacity: Es la propiedad CSS que controla la opacidad de un elemento. Un valor de 0 significa completamente transparente, mientras que un valor de 1 significa completamente opaco.
				-.5s: Es la duración de la transición en segundos. En este caso, la transición de opacidad tomará medio segundo (.5 segundos) para completarse.
				-ease: Es una función de temporización que controla cómo cambia la propiedad a lo largo del tiempo. La función ease se utiliza comúnmente para proporcionar una animación suave y gradual.
			En resumen, esta línea de código CSS indica que cuando cambie la opacidad de un elemento (como un menú), la transición hacia el nuevo valor de opacidad tomará medio segundo y se aplicará una función de temporización suave para hacer que la transición se sienta natural y agradable para el usuario. Esto podría ser útil, por ejemplo, para hacer que un menú aparezca y desaparezca de forma suave en respuesta a ciertos eventos, como pasar el cursor sobre un botón o hacer clic en un enlace.

	COMO HACER UNA SECCION FIJA Y QUE ESTE SIEMPRE VISIBLE EN TODO MOMENTO DE LA PAGINA
		EJEMPLO:
			.header{
				position: fixed;
				left: 0;
				bottom: 0;
				z-index: 999;
			}
			-position: fixed;: Esta propiedad establece que el elemento se posicionará de forma fija con respecto a la ventana del navegador, lo que significa que permanecerá en 	la misma ubicación independientemente de si se desplaza o no la página.
			-left: 0;: Esto fija el margen izquierdo del encabezado en el borde izquierdo de la ventana del navegador, lo que significa que estará pegado al lado izquierdo.
			-bottom: 0;: Esta línea fija el margen inferior del encabezado en el borde inferior de la ventana del navegador, lo que significa que estará pegado al borde inferior.
			-z-index: 999;: La propiedad z-index determina la posición en el eje z (es decir, la profundidad) del elemento con respecto a otros elementos en la página. Un valor más alto de -z-index significa que el elemento estará más arriba en la pila de capas. Al establecerlo en 999, asegura que el encabezado esté por encima de la mayoría de otros elementos en la página, lo que lo hace más visible.
			En resumen, este código CSS crea un encabezado que está fijo en la parte inferior izquierda de la ventana del navegador y siempre visible, incluso cuando se desplaza la página hacia abajo
			
	FUNCION ANONIMA AUTOEJECUTABLE DE JAVASCRIPT
	
		Una función anónima autoejecutable en JavaScript es una función que se define y se ejecuta inmediatamente después de ser creada. Esto se logra envolviendo la función entre paréntesis y luego agregando paréntesis al final de la declaración para invocarla. Este patrón también se conoce como IIFE (Immediately Invoked Function Expression).
		Ejemplo:
			(function() {
				// código que se ejecuta automáticamente
			})();
		En este ejemplo:
			La función se define entre paréntesis para que sea tratada como una expresión.
			Luego se agregan paréntesis al final de la declaración, lo que hace que la función se ejecute inmediatamente después de ser definida.
			La función no tiene nombre (es anónima), lo que significa que no puede ser referenciada fuera de su ámbito inmediato.
			Este patrón es útil para encapsular código y evitar la contaminación del ámbito global. Puedes utilizarlo para crear módulos, definir variables privadas y controlar el alcance de las variables en tu código JavaScript.
	
	PROPIEDAD POSICION:STICKY
	
		Es una forma de posicionar un elemento de manera que se comporte de forma relativa hasta que alcanza cierta posición, momento en el cual se "se adhiere" (sticky) a esa posición específica en la ventana del navegador o en su contenedor.
		La propiedad position: sticky funciona de manera similar a position: fixed, pero con una diferencia crucial: cuando se utiliza position: fixed, el elemento se vuelve fijo en relación con la ventana del navegador, lo que significa que permanece en la misma posición incluso cuando el usuario se desplaza. En cambio, position: sticky permite que el elemento siga siendo relativo hasta que alcance cierta posición en la ventana, momento en el que se vuelve fijo en relación con su contenedor más cercano con desplazamiento (scrollable container).
		Otra diferencia es que en fixed el elemento puede tapar el contenido, en sticky no porque ocupa su lugar
		
	USO DEL ELEMENTO ASIDE EN MAQUETADO CSS
	
		El elemento <aside> en HTML se utiliza típicamente para representar contenido relacionado pero independiente del contenido principal de una página. En términos de maquetado CSS, su función es proporcionar un área lateral para colocar contenido secundario, como barras laterales, anuncios, enlaces relacionados, información adicional, etc.
		Aquí hay algunas características y usos comunes del elemento <aside> en el maquetado CSS:
			- Contenido relacionado: Puede contener contenido que complementa el contenido principal de la página, como enlaces relacionados, widgets de redes sociales, publicidad, etc.
			- Barra lateral: Se puede usar para crear barras laterales en diseños de páginas, ya sea en la izquierda o en la derecha, dependiendo del diseño.
			- Contenido destacado: A veces se utiliza para resaltar o destacar contenido importante pero no esencial del contenido principal de la página.
			- Información adicional: Puede contener información adicional que sea relevante para el contexto de la página, pero que no necesariamente sea parte del flujo principal de contenido.
		En términos de estilos CSS, puedes aplicar estilos al elemento <aside> para controlar su apariencia, tamaño, posición y diseño en la página. Por ejemplo, puedes definir su ancho, altura, margen, relleno, fondo, bordes, etc., según el diseño específico que estés buscando lograr. Además, puedes utilizar técnicas de diseño responsivo para garantizar que el contenido dentro del <aside> se vea bien en diferentes tamaños de pantalla y dispositivos.
	
	DEFINICION DE VARIABLES DE CSS PERSONALIZADA DESDE EL HTML
		
		HTML: <article class="hero-image" style="--image:url('assets/hero-image-home.jpg');">
			En el HTML, se crea un elemento <article> con la clase hero-image.
			En el atributo style, se define una propiedad CSS personalizada (--image) y se le asigna un valor de url('assets/hero-image-home.jpg'). Esto establece la ruta de la imagen que se utilizará como fondo para este elemento <article>. La propiedad --image es una variable CSS personalizada que se puede usar más adelante en el CSS.
		CSS: .hero-image {
			background-image: var(--image);
			background-repeat: no-repeat;
		}
			En el CSS, se selecciona el elemento con la clase .hero-image.
			Se utiliza la propiedad background-image para establecer la imagen de fondo del elemento. El valor de esta propiedad es la variable CSS --image que se definió en el HTML.
			Se establece background-repeat: no-repeat para evitar que la imagen de fondo se repita en caso de que el elemento sea más grande que la imagen.
		
		PREGUNTA:
			Es correcto o de practicas comunes definir una variable personalizada como en el caso anterior en el html y pasarsela al css?
		
		RESPUESTA (RESPONDIDA POR IA)
			Definir variables CSS personalizadas en el HTML y luego utilizarlas en el CSS es una técnica válida, pero no es necesariamente una práctica común. Por lo general, las variables CSS personalizadas se definen en el CSS, ya sea en el archivo de estilo principal o en hojas de estilo separadas, y se utilizan en varios lugares dentro de la hoja de estilo para mantener la consistencia y facilitar la modificación y mantenimiento del código.
			
		Sin embargo, hay casos específicos donde definir variables en el HTML puede ser útil. Por ejemplo:
			
			- Dinamismo en el contenido: Si necesitas que el valor de una variable sea dinámico y dependa del contenido específico de un elemento HTML, puede tener sentido definirla en el HTML para poder cambiarla fácilmente según el contexto.
			- Gestión de componentes reutilizables: En componentes reutilizables que pueden estar incrustados en diferentes partes de un sitio web, definir variables en el HTML puede ser útil para proporcionar valores específicos para cada instancia del componente.
			- Integración con sistemas de plantillas o motores de renderizado: Algunos sistemas de plantillas o motores de renderizado pueden facilitar la definición de variables en el HTML y su posterior procesamiento en el CSS.
		
		Aunque esta técnica puede ser funcional en ciertos casos, generalmente se prefiere definir variables CSS en el propio CSS para mantener la separación de preocupaciones y facilitar la gestión de estilos en un proyecto más grande. Además, definir variables en el HTML puede dificultar la consistencia y la mantenibilidad del código, ya que las variables pueden estar dispersas por diferentes partes del documento HTML.
	
	MAQUETADO DE HERO IMAGE
	
		En el curso se da una tecnica de maquetado de hero image:
			
			<section id="inicio" class="home">
				<article class="hero-image" style="--image:url('assets/hero-image-home.jpg');
                                           --atachment:fixed">
					<aside class="hero-image-opacity">
						<div class="hero-image-content">
							<h2 class="hero-image-title">
							Bienvenidos <br>a  mi Sitio Web
								<a href="#contacto" class="btn">CONTACTAME</a>
							</h2>
						</div>
					</aside>
				</article>
			</section>
			
			.hero-image{
				background-image: var(--image);
				background-repeat: no-repeat;
				background-position: center;
				background-size: cover;
				background-attachment:var(--atachment);
				background-color: rgba(0,0,0,0.5)
			}
			
			.hero-image-opacity{
				width: 100%;
				min-height: 100vh;
				display: flex;
				justify-content: center;
				align-items: center;
			}
			
		Este código HTML y CSS crea una sección destacada en una página web, comúnmente conocida como una "hero section". Aquí está el desglose de lo que hace cada parte:
			HTML:
				Se crea un elemento <article> con la clase hero-image.
					Se define un estilo en línea utilizando la propiedad style para establecer dos variables CSS personalizadas: --image y --attachment.
					La variable --image se utiliza para especificar la URL de la imagen de fondo (assets/hero-image-home.jpg).
					La variable --attachment se utiliza para controlar si la imagen de fondo se desplaza con el contenido o permanece fija en su posición (fixed).
				Se crea un elemento <aside> con la clase hero-image-opacity, que se utilizará para superponer contenido sobre la imagen de fondo.
			CSS:

				.hero-image:
					Selecciona elementos con la clase hero-image.
					Se establece la imagen de fondo utilizando la variable --image.
					Se configuran propiedades de fondo adicionales para centrar la imagen (background-position: center), asegurar que cubra completamente el área (background-size: cover) y establecer si la imagen es fija o se desplaza (background-attachment: var(--attachment)).
				.hero-image-opacity:
					Selecciona elementos con la clase hero-image-opacity.
					width: 100%: Se establecen estilos para este elemento para que ocupe el 100% del ancho de la pantalla 
					y al menos el 100% del alto de la ventana (min-height: 100vh).
					Se utiliza flexbox para centrar vertical y horizontalmente el contenido dentro del elemento (display: flex; justify-content: center; align-items: center;).
					background-color: rgba(0,0,0,0.5):
						Añade un color de fondo semitransparente sobre la imagen de fondo. La propiedad rgba permite definir un color utilizando los componentes rojo, verde y azul (RGB) junto con un valor de transparencia (alfa) para crear un color semitransparente.
						En este caso, rgba(0,0,0,0.5) representa un color negro con una transparencia del 50%. Esto significa que el fondo negro será semitransparente, lo que permitirá que la imagen de fondo sea visible a través de él.
						Entonces, el efecto resultante sería una imagen de fondo con un tono oscuro superpuesto, lo que puede ayudar a mejorar la legibilidad del texto u otros elementos que se encuentren dentro de la sección .hero-image-opacity. La transparencia del color de fondo permitirá que parte de la imagen de fondo se muestre, creando un efecto visual atractivo y moderno. Este tipo de efecto es comúnmente utilizado en diseño web para resaltar el contenido sobre una imagen de fondo.
		En resumen, este código crea una sección destacada en una página web con una imagen de fondo, contenido superpuesto y estilos para centrar el contenido vertical y horizontalmente. La imagen de fondo puede ser fija o desplazarse con el contenido, dependiendo del valor de la variable --attachment.
		
	NOTA SOBRE TECNICA DE MAQUETADO DE COLUMNAS CSS GRID
		
		Cuando define un layout de columnas en css grid siempre deja un 10%, para poder distribuir el espacio restante con un space between y generar columnas con separacion dinamica
		
	PROPIEDAD OBJECT-FIT:COVER EN EL USO DE CONTENIDO MULTIMEDIA
	
		La propiedad CSS object-fit: cover; se utiliza en el contexto de imágenes y elementos de reemplazo (como <img>, <video>, <object>, <embed>, etc.) para especificar cómo se ajusta el contenido dentro del contenedor.
		Cuando se establece object-fit: cover;, la imagen se ajusta para cubrir completamente el contenedor manteniendo su relación de aspecto. Esto significa que la imagen se escalará para que la dimensión más pequeña del contenedor esté completamente cubierta, mientras que la dimensión más grande puede sobresalir del contenedor. Esto puede resultar en que parte de la imagen se recorte si su relación de aspecto no coincide exactamente con la del contenedor.
		En un contexto de maquetado con imágenes, object-fit: cover; es útil cuando se quiere asegurar que una imagen llene completamente su contenedor, sin importar su tamaño original, y sin distorsionar la relación de aspecto. Esto es comúnmente utilizado en galerías de imágenes, banners o cualquier diseño donde se desee que las imágenes se ajusten perfectamente al contenedor sin distorsionarse.
	
	ETIQUETA BLOCKQUOTE
	
		La etiqueta <blockquote> en HTML se utiliza para representar contenido que ha sido citado de otra fuente. Por lo general, se muestra con un estilo de sangría o algún otro estilo visual para distinguirlo claramente del contenido circundante.
		Ayuda a identificar claramente qué partes del contenido son citas, lo que puede ser útil para los lectores y para los motores de búsqueda.
		
	SELECTOR ~ EN CSS
	
		Un selector de hermano en CSS es un tipo de selector que selecciona elementos que son hermanos de otro elemento específico, y que aparecen después de ese elemento en el árbol de elementos HTML.
		El selector de hermano se representa mediante el signo de tilde (~) y se utiliza para aplicar estilos a elementos que siguen a un elemento específico en el mismo nivel jerárquico dentro del documento HTML.
		Es importante tener en cuenta que el selector de hermano selecciona elementos que son hermanos posteriores, es decir, que vienen después en el flujo del documento HTML.
		Ejemplo:
			<div class="container">
				<h2>Elemento 1</h2>
				<p>Contenido del elemento 1</p>
				<h2 id="elemento-especifico">Elemento Específico</h2>
				<p class="resaltado">Contenido del elemento específico</p>
				<p>Contenido adicional</p>
			</div>
			CSS PARA CAMBIAR EL COLOR DE TODOS LOS ELEMENTOS P HERMANOS POSTERIORES A "ELEMENTO ESPECIFICO", O SEA A TODOS LOS P DESPUES DE EL EN EL MISMO NIVEL JERARQUICO DE CSS
				#elemento-especifico ~ p {
					color: blue;
				}
	
	PROPIEDAD TRANSFORM EN CSS
		
		La propiedad transform en CSS es una propiedad versátil que permite aplicar transformaciones a elementos HTML. Estas transformaciones pueden incluir rotaciones, escalados, traslaciones (movimientos) y deformaciones (skew), lo que permite modificar la apariencia y el diseño de los elementos de una página web de forma dinámica.
		La sintaxis básica de la propiedad transform es la siguiente:
			transform: función(transformación);
				Donde función(transformación) es una función que especifica el tipo de transformación que se desea aplicar al elemento. Algunas de las funciones comunes que se pueden usar incluyen:
					translate(): Mueve el elemento a lo largo del eje X y/o Y.
					rotate(): Rota el elemento alrededor de un punto específico.
					scale(): Escala el tamaño del elemento.
					skew(): Deforma el elemento en un ángulo específico.
					matrix(): Permite especificar una transformación en forma de matriz 2D.

				Por ejemplo, para rotar un elemento en 45 grados, puedes usar:
						transform: rotate(45deg);
				O para escalar un elemento al doble de su tamaño original, puedes usar:
						transform: scale(2);
		La propiedad transform es muy útil para crear animaciones y efectos visuales dinámicos en una página web, y es compatible con la mayoría de los navegadores modernos.
		
	REGLA KEYFRAMES EN CSS
	
	La regla @keyframes en CSS es una regla especial que se utiliza para definir las etapas de una animación CSS. Permite especificar cómo cambian los estilos de un elemento durante una animación, definiendo los diferentes estados (o fotogramas clave) de la animación a lo largo del tiempo.
	La sintaxis básica de @keyframes es la siguiente:
		@keyframes nombreAnimacion {
			/* Definición de fotogramas clave */
		}
		Donde nombreAnimacion es un nombre único que se le da a la animación, y dentro de las llaves se definen los fotogramas clave que componen la animación.
		Cada fotograma clave especifica los estilos que se aplicarán al elemento en un momento específico durante la animación. Se pueden definir fotogramas clave para el inicio (0%), el final (100%) y para cualquier otro punto intermedio de la animación (por ejemplo, 50%).
	
	Por ejemplo, supongamos que queremos crear una animación que haga que un elemento se desvanezca gradualmente. Podríamos definir esta animación con @keyframes de la siguiente manera:
		@keyframes fadeOut {
			0% {
				opacity: 1;
			}
			100% {
				opacity: 0;
			}
		}
		En este ejemplo, estamos creando una animación llamada fadeOut que hace que el elemento pase de una opacidad de 1 (completamente visible) al 0 (completamente transparente) a lo largo de la animación.
	Después de definir los fotogramas clave con @keyframes, podemos aplicar la animación a un elemento utilizando la propiedad animation en CSS, especificando el nombre de la animación y la duración de la misma.
	En resumen, @keyframes en CSS permite definir las etapas de una animación CSS, especificando los cambios de estilo a lo largo del tiempo para crear efectos visuales dinámicos en los elementos de una página web.




	
	TERMINOLOGIA DE MAQUETADO
		
		HERO IMAGE:
			Una Hero Image es una imagen principal o destacada que se utiliza en un sitio web para representar productos o servicios de una empresa. También puede ser un vídeo, ilustración o GIF. Su función es captar la atención o interés de los visitantes al ingresar al sitio web, ya que suele ser lo primero que se visualiza en la landing page o página de una empresa.
			Se coloca en la parte superior de una página web o sección, con el objetivo de captar la atención del usuario y transmitir un mensaje o ambiente particular de manera impactante.
			Las "hero images" suelen ocupar una gran parte del área visible en la pantalla del usuario, a menudo con dimensiones significativas y alta resolución para garantizar una apariencia nítida y atractiva. Pueden estar acompañadas de texto superpuesto, botones de llamada a la acción u otros elementos de diseño para proporcionar información adicional o guiar al usuario hacia una acción específica, como navegar a otra página, registrarse, comprar un producto, etc.
			En términos de maquetado CSS, el uso de una "hero image" implica el posicionamiento adecuado de la imagen en la página, la aplicación de estilos para garantizar que se vea correctamente en diferentes tamaños de pantalla y dispositivos (diseño responsivo), y posiblemente la superposición de elementos de texto o botones utilizando técnicas como posicionamiento absoluto o flexbox/grid para lograr el diseño deseado.
			
		DISEÑO FLUIDO:
		
			En el diseño web fluido, los anchos de los elementos de la página se establecen de manera proporcional al ancho de la pantalla o ventana del navegador. Un sitio web fluido se expande o contrae según el ancho del viewport actual. El diseño fluido ayuda a hacer que los sitios web sean más utilizables en diferentes tipos de dispositivos con dimensiones de pantalla variables.
			Otra caracteristica princpial del diseño fluido es que intenta minimizar el uso de media queries sino evitarlo.
			El diseño fluido garantiza que un sitio web siempre se vea similar en su disposición independientemente de la pantalla. Una disposición consistente beneficia la experiencia del usuario mientras asegura la usabilidad para la mayor cantidad posible de visitantes.
			Diferencias con el diseño adaptativo:
				Los diseños fluidos ayudan a que los sitios web sean más utilizables, pero carecen del control fino ajustado del diseño adaptativo. En el enfoque adaptativo, los diseñadores crean múltiples disposiciones de sitios web separadas para anchos de pantalla específicos, con el objetivo de adaptarse a múltiples dispositivos específicos. Por lo tanto, un sitio web podría tener un diseño de disposición separado para verse en escritorio, tableta y teléfono inteligente.
				Los diseñadores web logran el diseño adaptativo con consultas de medios, una característica de CSS que detecta propiedades del dispositivo del usuario, incluidas las dimensiones de la pantalla. La consulta de medios lee el tamaño de la pantalla y luego selecciona el diseño fijo más adecuado entre múltiples opciones de diseño fijo.
				La contraparte es que los diseños adaptativos llevan mucho más tiempo hacerlos que los fluidos, lo que puede no ser sostenible para los propietarios individuales de sitios web.
			Diferencias con el diseño responsive:
				 Un diseño responsivo es un diseño aplicado a una página web que reformatea y redimensiona elementos basados en puntos de interrupción. Un punto de interrupción es un valor específico de ancho de viewport (en píxeles) que desencadena un cambio en el diseño del sitio web. Los puntos de interrupción se establecen en CSS con consultas de medios (o media queries).
				 A diferencia del diseño fluido, los sitios web responsivos utilizan puntos de interrupción para reorganizar o eliminar elementos en una página, en lugar de simplemente redimensionarlos. Por lo tanto, un diseño responsivo podría parecer bastante diferente en un escritorio en comparación con una tableta o un teléfono inteligente.
				 Los diseños responsivos son la opción preferida para los sitios web empresariales con páginas ricas en contenido e interactivas. Aunque requieren más trabajo para implementarse que las páginas puramente fluidas, un diseño responsivo asegura que el texto, los medios y los elementos de interacción se vean excelentes en cualquier ancho de visualización, especialmente cuando simplemente reducir los elementos de la página de ancho no garantiza una buena usabilidad o estética.
			Beneficios del diseño fluido:
				Obviamente, el principal beneficio del diseño fluido es la capacidad de mostrar un sitio web adecuadamente en cualquier tamaño de pantalla, y esto es especialmente importante para los usuarios de dispositivos móviles. ¿Por qué es tan importante para los usuarios de dispositivos móviles? Bueno, según Pew Research, el 85% de los estadounidenses poseen un teléfono inteligente, e incluso el 15% de los adultos estadounidenses son usuarios de internet exclusivamente a través de teléfonos inteligentes. Esto significa que hay muchos usuarios de internet móvil, y el diseño de sitios web pensando en ellos solo será más importante con el tiempo.
				Si piensas desde la perspectiva de la Optimización para Motores de Búsqueda (SEO), también te beneficiarás al saber que Google hace algo llamado indexación móvil primero. Esto significa que Google se asegura de que los principales resultados de búsqueda sean compatibles con dispositivos móviles. Para asegurarte de que tu sitio sea un resultado de búsqueda superior, tu sitio necesita ser compatible con dispositivos móviles.
				Finalmente, otro beneficio es que los diseños fluidos tienden a cargar rápidamente. La razón es que no hay muchos ajustes que hacer en la posición y el tamaño de los elementos cuando se cargan. El rendimiento suele ser una métrica extremadamente importante, por lo que este beneficio no debe pasarse por alto si eso es lo que te importa.
			Cuando deberías usar diseño fluido?:
				El diseño fluido no es una solución única para todos, ni tampoco lo son el diseño responsivo o adaptativo. Estos métodos no necesitan ser utilizados de manera aislada, tampoco; los principios de cualquiera de ellos pueden combinarse para mejorar la experiencia móvil.
				Al considerar un diseño fluido, deberías pensar en:
					-Métricas de audiencia. Herramientas de seguimiento como Google Analytics pueden segmentar tu tráfico por escritorio, tableta y móvil. Utiliza métricas para informar dónde poner tus recursos de diseño.
					-Contenido del sitio. Si tu sitio tiene relativamente poco texto, medios y características interactivas, puedes salirte con la tuya con un diseño puramente fluido en algunas o todas las páginas. De lo contrario, es mejor incorporar principios adaptativos y responsivos. Mapear tu diseño con wireframes es útil en esta fase.
					-Recursos. Debido a su relativa simplicidad, los diseños fluidos generalmente requieren menos tiempo, dinero y esfuerzo para incorporarse desde cero. Sin embargo, los constructores de sitios web con plantillas de página responsivas prediseñadas han hecho que las páginas responsivas complejas sean más accesibles para aquellos que carecen de habilidades de diseño.
					-Por último, si incorporas elementos fluidos en tus páginas, prueba tu sitio en una variedad de tamaños de pantalla, desde teléfonos inteligentes hasta ventanas de navegador de escritorio grandes. Sin instrucciones específicas sobre cómo acomodar dimensiones específicas, un enfoque puramente fluido podría no perfeccionar tu experiencia de usuario. Pero, puede acercarte bastante.
				
			FUENTEs: https://blog.hubspot.com/website/fluid-design
					 https://learn.onemonth.com/responsive-vs-adaptive-vs-fluid-design/
					 
	NOTAS DE PSEUDO ELEMENTOS EN CSS
	
		Los pseudo-elementos en CSS son una manera de seleccionar y estilizar partes específicas de un elemento HTML. Se distinguen de los pseudo-clases en que los pseudo-elementos seleccionan partes del contenido de un elemento, mientras que las pseudo-clases seleccionan el propio elemento en distintos estados.
			Algunos de los pseudo-elementos más comunes:
				-::before y ::after: Estos pseudo-elementos permiten insertar contenido antes o después del contenido real del elemento seleccionado, respectivamente. Se utilizan a menudo para añadir elementos decorativos o contenido adicional a un elemento sin necesidad de modificar directamente el HTML.
				-::first-line y ::first-letter: Estos pseudo-elementos seleccionan la primera línea o la primera letra de un elemento de texto, respectivamente. Se utilizan para aplicar estilos específicos a estas partes del texto.
				-::selection: Este pseudo-elemento selecciona el texto que ha sido resaltado por el usuario. Se utiliza para aplicar estilos específicos a la selección de texto.
				-::placeholder: Este pseudo-elemento se utiliza para aplicar estilos al texto de marcador de posición en los elementos de entrada (<input>, <textarea>).
				-::marker: Este pseudo-elemento se utiliza para estilizar el marcador de lista de elementos de lista (<li>).
				
		PSEUDO ELEMENTO DE PROGRESS progress::-webkit-progress-bar (para chrome)
	
			En este contexto, ::webkit-progress-bar se refiere a la barra de progreso interna de un elemento <progress> en navegadores que utilizan el motor de renderizado WebKit, como Google Chrome y Safari. Este pseudo-elemento permite aplicar estilos específicos a la barra de progreso misma, en contraposición al contenedor de progreso en sí.
			Por ejemplo, podrías definir estilos para el contenedor de progreso (<progress>) y también estilos específicos para la barra de progreso interna (::webkit-progress-bar) para tener un mayor control sobre cómo se ve y se comporta la barra de progreso en tu página web.
		
		ANOTACION SOBRE moz-progress-bar
		
			progress::-moz-progress-bar (para firefox)
			Esta pseudo clase modifica el color de la barra de progreso en firefox
	
	
	
	PRACTICAS DE MAQUETADO Y SEO
		
		UTILIZACION DE H1 (ENCABEZADO EN HTML)
			
			La recomendación de tener solo un elemento <h1> por página web es una práctica común y generalmente considerada una buena práctica de SEO (Optimización para Motores de Búsqueda) y de accesibilidad web. Sin embargo, no es una regla estricta y hay situaciones en las que puede ser apropiado tener más de un <h1> en una página.
			En el caso de que sea necesario tener mas de un h1
				Aquí hay algunas consideraciones:
					- Estructura de la página: El <h1> generalmente se usa para el título principal de la página, que resume el contenido o el propósito principal de la página. Si una página tiene múltiples secciones claramente definidas con títulos o encabezados distintos, puede ser apropiado usar un <h1> para cada sección si reflejan el contenido principal de esa sección.
					- SEO: Los motores de búsqueda tienden a dar más peso al texto dentro de un <h1>, ya que se considera un indicador importante del tema principal de la página. Por lo tanto, tener múltiples <h1> puede diluir la relevancia de cada uno para los motores de búsqueda.
					- Accesibilidad: Los lectores de pantalla a menudo navegan por la página utilizando la estructura de encabezados para comprender la jerarquía y la organización del contenido. Tener múltiples <h1> puede confundir esta estructura y dificultar la navegación para los usuarios que dependen de tecnologías de asistencia.
			En el caso de que sea posible solo utilizar un h1 estas son algunas consideraciones:
				En el caso de que la página tenga múltiples secciones o subtítulos, se recomienda utilizar etiquetas h2, h3, h4, etc. para crear una jerarquía de títulos y subtítulos claros. Esto ayuda a los lectores y los motores de búsqueda a comprender mejor el contenido y a encontrar la información que necesitan.
				Es importante tener en cuenta que el texto dentro de la etiqueta h1 debe ser descriptivo y relevante para el contenido de la página. Además, es recomendable que el título principal o tema de la página sea único y no se repita en la página.
			En resumen, si una página tiene múltiples secciones claramente definidas, puede ser apropiado usar un <h1> para cada sección si reflejan el contenido principal de esa sección. Sin embargo, es importante utilizarlos de manera significativa y coherente con la estructura y el contenido de la página.
		
		
		USO DE POSITION: RELATIVE
			
			La propiedad CSS position: relative; se utiliza principalmente para cambiar la posición de un elemento con respecto a su posición normal en el flujo del documento, pero sin eliminarlo del flujo normal. En otras palabras, el elemento se moverá desde su posición original, pero los demás elementos en el documento aún lo tratarán como si estuviera en su lugar original.
			Una práctica común para utilizar position: relative; es cuando se quiere posicionar un elemento secundario de manera relativa a su elemento contenedor. Por ejemplo, si quieres posicionar un elemento dentro de un contenedor y desplazarlo una cierta cantidad de píxeles desde su posición normal, position: relative; es útil. Esto es especialmente útil cuando se combina con otras propiedades como top, right, bottom o left, que permiten ajustar la posición del elemento relativo con respecto a sí mismo.
			En resumen, position: relative; se usa cuando se necesita ajustar la posición de un elemento con respecto a su posición normal sin afectar el diseño general del documento.
			Esto significa que se pone para poder ubicar luego ese elemento u algun elemento hijo de ese contenedor en otra posición sin tener que alterar el resto del maquetado.
			
		
		ELEMENTO TITLE EN LAS PAGINAS WEB
		
			El elemento <title> en HTML desempeña un papel fundamental en SEO (Optimización para Motores de Búsqueda). La función principal del elemento <title> es proporcionar un título descriptivo y relevante para cada página web. Este título aparece en la barra de título del navegador y es también lo que se muestra como el título principal en los resultados de búsqueda de los motores como Google.
				Algunas prácticas comunes al utilizar el elemento <title> en tus páginas web con SEO incluyen:
					- Relevancia y precisión: Asegúrate de que el título refleje con precisión el contenido de la página. Debe ser relevante para el tema principal y ofrecer una descripción clara de lo que los usuarios encontrarán en la página.
					- Longitud óptima: Los motores de búsqueda suelen mostrar hasta aproximadamente 50-60 caracteres del título en los resultados de búsqueda. Intenta mantener el título dentro de este rango para garantizar que se muestre completamente y sea fácil de entender.
					- Incluir palabras clave: Incorpora palabras clave relevantes en el título para ayudar a los motores de búsqueda a entender de qué se trata tu página. Sin embargo, evita el relleno excesivo de palabras clave, ya que esto puede parecer poco natural y perjudicar la experiencia del usuario.
					- Escribe para los usuarios: Aunque es importante incluir palabras clave, también es esencial que el título sea atractivo y relevante para los usuarios. Debe invitar a hacer clic y proporcionar una idea clara del contenido de la página.
					- Evitar duplicados: Cada página de tu sitio web debe tener un título único. Evita usar el mismo título en múltiples páginas, ya que esto puede confundir a los motores de búsqueda y dificultar la diferenciación entre el contenido.
					- Nombre de la marca: Si es relevante, considera incluir el nombre de tu marca en el título, especialmente en las páginas principales o importantes del sitio.
					- Revisión regular: Realiza revisiones periódicas de los títulos de tus páginas para asegurarte de que sigan siendo relevantes y efectivos. Los cambios en el contenido o en la estrategia de palabras clave pueden requerir ajustes en los títulos.
				Al seguir estas prácticas, puedes optimizar tus títulos de página para mejorar el SEO y la experiencia del usuario en tu sitio web.
				
		ELEMENTO META NAME="DESCRIPTION"
		
			La etiqueta meta name="description" en HTML también desempeña un papel importante en SEO. Su función principal es proporcionar una breve descripción del contenido de la página. Esta descripción se muestra en los resultados de búsqueda de los motores como Google, debajo del título, y puede influir en la decisión de los usuarios de hacer clic en el enlace de tu página.
				Aquí hay algunas prácticas comunes en SEO para la etiqueta meta name="description":
					- Relevancia y precisión: Al igual que con el título, asegúrate de que la descripción sea relevante y precisa para el contenido de la página. Debe proporcionar una breve visión general de lo que los usuarios encontrarán al hacer clic en el enlace.
					- Longitud óptima: Aunque no hay una longitud fija para la descripción, se recomienda mantenerla dentro de los 150-160 caracteres. Esto garantiza que se muestre completamente en los resultados de búsqueda y sea fácil de entender para los usuarios.
					-Incluir palabras clave: Incorpora palabras clave relevantes en la descripción para ayudar a los motores de búsqueda a entender de qué se trata tu página. Esto puede ayudar a mejorar la relevancia de tu página para ciertas consultas de búsqueda.
					-Llamado a la acción: Considera incluir un llamado a la acción (CTA) o un mensaje persuasivo en la descripción para animar a los usuarios a hacer clic en el enlace de tu página. Esto puede aumentar la tasa de clics (CTR) en los resultados de búsqueda.
					-Evitar duplicados: Al igual que con los títulos, cada página de tu sitio web debe tener una descripción única. Evita el uso de descripciones duplicadas, ya que esto puede confundir a los motores de búsqueda y afectar negativamente la clasificación de tu página.
					-Escritura para los usuarios: Asegúrate de que la descripción sea legible y atractiva para los usuarios. Debe proporcionar una idea clara del contenido de la página y animar a los usuarios a hacer clic en el enlace.
				
		ETIQUETAS VARIAS DE SEO Y EXPERIENCIA DE USUARIO
		
			- <meta name="theme-color" content="#d9006">: Esta etiqueta define el color de fondo de la barra de navegación en dispositivos móviles. Aunque no tiene un impacto directo en el SEO, proporciona una experiencia de usuario consistente y agradable, lo que puede influir indirectamente en factores como la retención de usuarios y la tasa de rebote.
			- <meta name="twitter:card" content="summary">: Esta etiqueta define el tipo de tarjeta que se mostrará cuando se comparta el enlace en Twitter. Si se elige correctamente, puede ayudar a mejorar la apariencia y la visibilidad de tus enlaces compartidos en Twitter, lo que puede aumentar el tráfico hacia tu sitio web desde esa plataforma.
			- <meta property="og:title" name="twitter:title" content="">: Estas etiquetas especifican el título que se mostrará cuando se comparta el enlace en plataformas sociales como Twitter y Facebook. Es importante proporcionar un título relevante y atractivo que describa con precisión el contenido de la página, lo que puede aumentar la tasa de clics y el tráfico desde las redes sociales.
			- <meta property="og:image" name="twitter:image" content="assets/hero-image-home.jpg">: Estas etiquetas especifican la imagen que se mostrará cuando se comparta el enlace en plataformas sociales. Proporcionar una imagen visualmente atractiva y relevante puede mejorar la visibilidad y el atractivo de tus enlaces compartidos, lo que puede aumentar la tasa de clics y el tráfico hacia tu sitio web.
			- <meta property="og:url" name="twitter:url" content="ruta-absoluta">: Estas etiquetas especifican la URL del enlace que se compartirá en plataformas sociales. Es importante proporcionar una URL válida y relevante para asegurar que los enlaces compartidos redirijan correctamente a los usuarios a la página correspondiente en tu sitio web.
			- <meta property="og:description" name="twitter:description" content="Hola bienvenidos a mi Portfolio Profesional soy Daniel Morvallevich, Desarrollador Web">: Estas etiquetas especifican la descripción que se mostrará cuando se comparta el enlace en plataformas sociales. Proporcionar una descripción concisa y relevante puede aumentar la probabilidad de que los usuarios hagan clic en tus enlaces compartidos, lo que puede aumentar el tráfico hacia tu sitio web.
			- <meta property="og:type" content="website">: Esta etiqueta especifica el tipo de contenido que se compartirá en plataformas sociales. En este caso, se indica que se trata de un sitio web. Es importante proporcionar información precisa sobre el tipo de contenido para garantizar una representación adecuada en las redes sociales.
	
		URL CANONICA
		
			El tag <link rel="canonical" href=""> juega un papel crucial en SEO al ayudar a los motores de búsqueda a identificar la URL preferida para una página web específica cuando existen múltiples versiones de esa página. Esto es especialmente importante en situaciones donde una página puede ser accesible a través de varias URL diferentes, como variaciones de URL con parámetros de seguimiento, versiones HTTP y HTTPS, o páginas con contenido duplicado.
			El atributo href en el tag canonical debe apuntar a la URL canónica, es decir, la versión preferida de la página. Al especificar la URL canónica, estás indicando a los motores de búsqueda cuál es la versión principal o autoritaria de tu contenido, lo que ayuda a consolidar la autoridad de esa página en lugar de dispersarla entre múltiples URLs.
			La importancia del tag canonical en SEO radica en varios beneficios:
				- Evita contenido duplicado: Ayuda a prevenir problemas de contenido duplicado al especificar una única URL canónica para una página, lo que permite a los motores de - búsqueda entender cuál es la versión preferida y evitar indexar y clasificar versiones duplicadas del mismo contenido.
				- Consolidación de autoridad: Al dirigir la autoridad de enlace y la relevancia de las páginas a una única URL canónica, se concentra el valor de SEO en esa página, lo que puede mejorar su posicionamiento en los resultados de búsqueda.
				- Mejora la experiencia del usuario: Al eliminar la confusión sobre qué URL es la correcta, el tag canonical puede mejorar la experiencia del usuario al asegurar que los usuarios lleguen a la versión preferida de la página y no se encuentren con contenido duplicado o versiones irrelevantes.
				- En resumen, el tag <link rel="canonical" href=""> es una herramienta fundamental en SEO para gestionar contenido duplicado y consolidar la autoridad de las páginas web, lo que puede tener un impacto positivo en la visibilidad y el rendimiento de tu sitio en los resultados de búsqueda
			Por ejemplo esta url es importante en sitios de e commerce, donde no es posible tener solo una url. Esto evita penalizaciones por tener mas de una url en tu pagina por parte de seo.
				
	NOTAS SOBRE USO DE MEDIA QUERIES
		
		IMPORTANCIA DE SEPARACION EN DECLARACION DE MEDIA QUERIES CON EL USO DE AND
		
			Diferencia entre @media screen and (min-width:1024px) y @media screen and(min-width:1024px
			La razón por la que la segunda declaración de media query @media screen and(min-width:1024px){} no funciona es porque está omitiendo un espacio entre la palabra clave and y el paréntesis de apertura (min-width:1024px). En CSS, los espacios en blanco, incluidos los espacios, las tabulaciones y las nuevas líneas, generalmente se ignoran, excepto cuando son necesarios para separar tokens (como palabras clave, identificadores, etc.) y separar declaraciones.
			Por lo tanto, en la primera declaración, hay un espacio en blanco entre and y (min-width:1024px), lo que indica claramente que and es una palabra clave y (min-width:1024px) es una expresión de media query. En la segunda declaración, al faltar el espacio en blanco, el analizador de CSS puede interpretar and(min-width:1024px) como una única unidad, lo que no es una sintaxis válida para una media query.

			Por lo tanto, siempre es importante mantener los espacios en blanco adecuados para garantizar que el CSS se interprete correctamente.
	
	
	COMPONENTE DE VENTANA MODAL SIN JAVASCRIPT
	
		HTML
			<article class="modal" id="trabajo-1">
				<div class="modal-content">
					<a href="#cerrar" class="modal-close">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z M16.207,14.793l-1.414,1.414L12,13.414 l-2.793,2.793l-1.414-1.414L10.586,12L7.793,9.207l1.414-1.414L12,10.586l2.793-2.793l1.414,1.414L13.414,12L16.207,14.793z"/></svg>
					</a>
					<h2>Contenido del Modal</h2>
				</div>
			</article>
		CSS
			.modal{
				position: fixed;
				z-index: 999;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
				display: flex;
				justify-content: center;
				align-items: center;
				background-color: var(--black-alpha-color);
				opacity: 0;
				pointer-events: none;
				transition: all 1s;
			}
			.modal-content{
				position: fixed;
			}
			.modal-close{
				position: absolute;
				top: 1rem;
				right: 1rem;
			}
			.modal-close svg{
				width: 3rem;
				height: 3rem;
				fill: var(--first-color);
			}
			.modal[id|="trabajo"]:target{
				opacity: 1;
				pointer-events: auto;
			}
			
		Este código HTML y CSS crea un modal (ventana emergente) que se muestra cuando se hace clic en un enlace específico (<a>) con un atributo href que coincide con el ID del modal (#trabajo-1). Vamos a analizar qué hace cada parte del código CSS:
		# Estilos para el modal (article.modal):
			- position: fixed;: Fija la posición del modal en la ventana del navegador para que se mantenga fijo en la pantalla mientras se desplaza.
			- z-index: 999;: Establece la pila de capas del modal, asegurando que esté por encima de otros elementos en la página.
			- top: 0; right: 0; bottom: 0; left: 0;: Establece que el modal ocupe toda la pantalla.
			- display: flex; justify-content: center; align-items: center;: Centra vertical y horizontalmente el contenido del modal dentro de él.
			- background-color: var(--black-alpha-color);: Establece un fondo oscuro semitransparente para el modal.
			- opacity: 0; pointer-events: none;: Inicialmente hace que el modal sea invisible y deshabilita eventos del ratón y del teclado en él.
			- transition: all 1s;: Aplica una transición suave a todas las propiedades cuando cambia el estado del modal.
		# Estilos para el contenido del modal (div.modal-content):
			- position: fixed;: Fija la posición del contenido del modal para que se mantenga en su lugar dentro del modal.
		# Estilos para el botón de cerrar (a.modal-close):
			- position: absolute; top: 1rem; right: 1rem;: Coloca el botón de cerrar en la esquina superior derecha del modal con un pequeño espacio de desplazamiento.
		# Estilos para el icono de cierre (svg dentro de .modal-close):
			- width: 3rem; height: 3rem;: Establece el tamaño del icono de cerrar.
			- fill: var(--first-color);: Aplica un color específico al icono de cerrar.
		# Estilos específicos cuando el modal está activo (modal[id|="trabajo"]:target):
			- opacity: 1; pointer-events: auto;: Hace que el modal sea visible y habilita eventos del ratón y del teclado en él cuando se activa (:target). El selector [id|="trabajo"] busca cualquier elemento con un ID que comience con "trabajo". En este caso, cuando se activa el modal con ID "trabajo-1", este estilo hace que el modal sea visible y activa los eventos del ratón y del teclado.

		En resumen, este código CSS crea un modal que ocupa toda la pantalla y muestra un contenido centrado vertical y horizontalmente cuando se activa mediante un enlace específico. El modal se vuelve visible con una transición suave y permite al usuario cerrarlo haciendo clic en un botón de cierre en la esquina superior derecha.
	
WEBS DE DISEÑO

``
`

Codigos ASCI para caracteres de programacion

	` Backtick 		= Alt + 96
	~ Virgulilla 	= Alt + 126

https://www.cssdesignawards.com/
https://hackdesign.org/

5:33:15

https://tangerine-cajeta-c17f6d.netlify.app/